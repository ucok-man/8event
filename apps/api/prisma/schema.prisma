// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model PointBalance {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  point     Float // this can be negative or positive
  type      PointBalanceType
  createdAt DateTime         @default(now()) @db.Timestamptz
  // expiredAt DateTime?  @db.Timestamptz // missing feature
}

model Voucher {
  id          String        @id @default(uuid())
  name        String
  description String
  price       Float
  status      VoucherStatus @default(NOT_USE)
  createdAt   DateTime      @default(now()) @db.Timestamptz
  expiredAt   DateTime?     @db.Timestamptz

  user   User   @relation(fields: [userId], references: [id])
  userId String

  transactions Transaction[]
}

model AuthToken {
  id               String   @id @default(uuid())
  accessToken      String
  refreshToken     String
  refreshExpiredAt DateTime @db.Timestamptz

  user  User   @relation(fields: [email], references: [email])
  email String @unique
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  profilePicture String?
  role           Role
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @updatedAt @db.Timestamptz

  referralCode String  @unique // A special code that this user gets. They can share it with others to invite them to sign up.
  referrals    User[]  @relation("SignupReferral") // A list of users who signed up using this user's referral code.
  referredBy   User?   @relation("SignupReferral", fields: [referredById], references: [id]) // The user who invited this user to sign up (if they used a referral code).
  referredById String? // The ID of the user who invited this user (if a referral code was used).

  pointBalances   PointBalance[]
  organizedEvents Event[]        @relation("UserOrganizedEvents")
  transactions    Transaction[]
  reviews         Review[]
  vouchers        Voucher[]
  authToken       AuthToken[]
}

model EventCategory {
  id   String @id @default(uuid())
  name String @unique

  events Event[]
}

model Event {
  id          String   @id @default(uuid())
  name        String
  bannerUrl   String
  description String
  startDate   DateTime @db.Timestamptz
  endDate     DateTime @db.Timestamptz
  startTime   String
  endTime     String
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  views       Int      @default(0)

  isEventOnline Boolean
  urlStreaming  String?
  placeName     String?
  placeCity     String?
  placeAddress  String?

  isPublished Boolean @default(false)

  organizer   User   @relation("UserOrganizedEvents", fields: [organizerId], references: [id])
  organizerId String

  category   EventCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  tickets Ticket[]

  transactions Transaction[]
  reviews      Review[]
}

model Ticket {
  id            String     @id @default(uuid())
  type          TicketType
  name          String
  description   String
  initialAmount Int // immutable
  amount        Int
  startDate     DateTime   @db.Timestamptz
  endDate       DateTime   @db.Timestamptz
  startTime     String
  endTime       String
  price         Float?
  createdAt     DateTime   @default(now()) @db.Timestamptz
  updatedAt     DateTime   @updatedAt @db.Timestamptz

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  transactions TransactionTicket[]
}

model Transaction {
  id                  String            @id @default(uuid())
  status              TransactionStatus @default(WAITING_PAYMENT)
  priceBeforeDiscount Float
  priceAfterDiscount  Float
  isPayed             Boolean           @default(false) // this is updated when user pay on midtrans
  paymentProof        String?
  snaptoken           String?
  createdAt           DateTime          @default(now()) @db.Timestamptz
  expiredAt           DateTime?         @db.Timestamptz

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String

  totalTicketQuantity Int
  tickets             TransactionTicket[]

  totalDiscount Float
  usedPoints    Float?
  voucher       Voucher? @relation(fields: [voucherId], references: [id])
  voucherId     String?
}

model TransactionTicket {
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  name     String // ticket name
  price    Float // price per individual ticket
  quantity Int // quantity per individual ticket

  @@id([transactionId, ticketId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0) // check constraint to max of 5 on migration, value 0 mean user dont give rating;
  comment   String
  createdAt DateTime @default(now()) @db.Timestamptz

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  COMPLETED
  CANCELLED
  EXPIRED
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum PointBalanceType {
  EARN
  REDEEM
}

enum TicketType {
  FREE
  PAID
}

enum VoucherStatus {
  NOT_USE
  USED
}

view RecordOrganizerAverageRating {
  organizerId   String @unique // this will be user id with role Organizer only
  averageRating Float // calculated from average all review rating for the event ever created for this organizer
}
